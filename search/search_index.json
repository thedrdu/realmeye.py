{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"realmeye.py","text":"<p>API wrapper for RealmEye written in Python.</p> <p>This package aims to provide an abstracted, easy-to-use and fully type-hinted API wrapper for developers, in order to gather player and guild information from RealmEye.</p> <p></p>"},{"location":"#example-usage","title":"Example Usage","text":"<pre><code>import asyncio\nfrom realmeye import get_player_data\n\nasync def main():\n    player = await get_player_data(\"KatsFan\")\n    print(len(player.characters))\n    print(player.name)\n\nif __name__ == '__main__':\n    asyncio.run(main())\n\n</code></pre> <p>Output:</p> <pre><code>8\nKatsFan\n</code></pre>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python3.8 or newer</li> <li>aiohttp</li> <li>pydantic</li> <li>beautifulsoup4</li> </ul>"},{"location":"credits/","title":"Credits","text":"<ul> <li>thedrdu</li> </ul> <p>The credits list is a bit empty right now. However, feel free to contribute by opening a pull request or raising an issue!</p> <p>Also, huge shoutouts to genshin.py for inspiration and assistance!</p>"},{"location":"functions/","title":"Functions","text":"<p><code>realmeye.py</code> provides powerful functions to allow developers to retrieve RealmEye data in a simplified format.</p>"},{"location":"functions/#get_player_data","title":"get_player_data()","text":"<p><code>get_player_data()</code> attempts to retrieve data for a specified player. If the player's RealmEye page is found, the function returns a Player object containing the visible information on the target player's RealmEye page. Otherwise, it returns None.</p>"},{"location":"functions/#example-usage","title":"Example Usage","text":"<pre><code>import asyncio\nfrom realmeye import get_player_data\n\nasync def main():\n    player = await get_player_data(\"KatsFan\")\n    print(len(player.characters))\n    print(player.name)\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre>"},{"location":"functions/#get_guild_data","title":"get_guild_data()","text":"<p><code>get_guild_data()</code> attempts to retrieve data for a specified guild. If the guild's RealmEye page is found, the function returns a Guild object containing the visible information on the target guild's RealmEye page. Otherwise, it returns None.</p>"},{"location":"functions/#example-usage_1","title":"Example Usage","text":"<pre><code>import asyncio\nfrom realmeye import get_guild_data\n\nasync def main():\n    guild = await get_guild_data(\"TowerJanitors\")\n    print(guild.characters)\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre>"},{"location":"guild/","title":"Guild","text":""},{"location":"guild/#overview","title":"Overview","text":"<p>The <code>Guild</code> class in <code>realmeye.py</code> is designed to represent guild data retrieved from a RealmEye guild page. The <code>Guild</code> class also uses integral <code>Member</code> objects to represent the visible attributes of members of a guild.</p>"},{"location":"guild/#definition","title":"Definition","text":"<pre><code>class Member(BaseModel):\n    \"\"\"A Member object to represent retrieved guild member data.\"\"\"\n    name: str\n    guild_rank: str\n    fame: int\n    star_rank: int\n    characters: int\n    last_seen: Optional[str]\n    server: Optional[str]\n\nclass Guild(BaseModel):\n    \"\"\"A Guild object to represent retrieved guild data.\"\"\"\n    name: str\n    description: Optional[List[str]] = None\n    member_count: int\n    members: List[Member]\n    characters: int\n    fame: int\n    active_server: str\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>Currently, <code>realmeye.py</code> can be installed directly from GitHub via the following command:</p> <pre><code>pip install git+https://github.com/thedrdu/realmeye.py\n</code></pre> <p>Once the official release on PyPI happens, this page will be updated accordingly.</p>"},{"location":"player/","title":"Player","text":""},{"location":"player/#overview","title":"Overview","text":"<p>The <code>Player</code> class in <code>realmeye.py</code> is designed to represent individual player data retrieved from a RealmEye player page. The <code>Player</code> class also uses integral <code>Character</code> objects to represent the visible characters associated with a player.</p>"},{"location":"player/#definition","title":"Definition","text":"<pre><code>class Character(BaseModel):\n    \"\"\"A Character object to represent retrieved player character data.\"\"\"\n    character_class: str\n    level: int\n    fame: int\n    place: int\n    items: List[str]\n    stats: str\n    last_seen: Optional[str] = None\n\nclass Player(BaseModel):\n    \"\"\"A Player object to represent retrieved player data.\"\"\"\n    name: str\n    description: Optional[List[str]] = None\n    characters_count: Optional[int] = None\n    skins: Optional[int] = None\n    exaltations: Optional[int] = None\n    fame: int\n    rank: int\n    account_fame: int\n    guild: Optional[str] = None\n    guild_rank: Optional[str] = None\n    first_seen: Optional[str] = None\n    created: Optional[str] = None\n    last_seen: Optional[str] = None\n    characters: Optional[List[Character]] = None\n</code></pre>"}]}